#!/usr/bin/env python3
"""
Complete Universal Browser Automation System Creator - FIXED VERSION
==================================================================

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–µ—Ç –í–°–ï —Ñ–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞.
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –æ—à–∏–±–æ–∫ –æ—Ç—Å—Ç—É–ø–æ–≤.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python create_system.py
"""

import os
import json
import sqlite3
from pathlib import Path
from datetime import datetime
import random

def print_banner():
    """–ë–∞–Ω–Ω–µ—Ä —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å–∏—Å—Ç–µ–º—ã"""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                                  ‚ïë
‚ïë        üîß COMPLETE SYSTEM CREATOR - FIXED üîß                    ‚ïë
‚ïë                                                                  ‚ïë
‚ïë    –°–æ–∑–¥–∞–Ω–∏–µ –í–°–ï–• —Ñ–∞–π–ª–æ–≤ Universal Browser Automation             ‚ïë
‚ïë    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –æ—à–∏–±–æ–∫ –æ—Ç—Å—Ç—É–ø–æ–≤                       ‚ïë
‚ïë                                                                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)

def create_directories():
    """–°–æ–∑–¥–∞—Ç—å –≤—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    directories = [
        "core", "projects", "data", "data/backups", "logs", "logs/daily",
        "screenshots", "screenshots/errors", "screenshots/success", 
        "extensions", "browser_profiles", "downloads", "config"
    ]
    
    # –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏
    for i in range(30):
        directories.extend([
            f"browser_profiles/profile_{i:02d}",
            f"downloads/profile_{i:02d}"
        ])
    
    created = 0
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        created += 1
    
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {created} –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")

def create_browser_core():
    """–°–æ–∑–¥–∞—Ç—å browser_automation_core.py"""
    content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Universal Browser Automation System - Core Module
–ë–∞–∑–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
"""

import asyncio
import json
import sqlite3
from pathlib import Path
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, field
from datetime import datetime
import random

try:
    from playwright.async_api import async_playwright, Browser, BrowserContext, Page
    PLAYWRIGHT_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è Playwright –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: pip install playwright")
    PLAYWRIGHT_AVAILABLE = False

@dataclass
class BrowserProfile:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –±—Ä–∞—É–∑–µ—Ä–∞"""
    id: str
    name: str
    user_agent: str
    viewport: Dict[str, int]
    locale: str
    timezone: str
    extensions: List[str] = field(default_factory=list)
    cookies: Dict[str, Any] = field(default_factory=dict)

class ConfigManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, config_path: str = "config.json"):
        self.config_path = Path(config_path)
        self.config = self._load_config()
    
    def _load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        default_config = {
            "browser": {
                "headless": False,
                "timeout": 30000,
                "viewport": {"width": 1440, "height": 900}
            },
            "ai": {
                "provider": "openai",
                "api_key": "",
                "model": "gpt-4-vision-preview"
            },
            "profiles": {"count": 30},
            "logging": {"level": "INFO", "file": "logs/automation.log"}
        }
        
        if self.config_path.exists():
            try:
                with open(self.config_path, 'r', encoding='utf-8') as f:
                    user_config = json.load(f)
                    default_config.update(user_config)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        
        return default_config
    
    def get(self, key: str, default: Any = None) -> Any:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        keys = key.split('.')
        value = self.config
        for k in keys:
            value = value.get(k, default)
            if value is None:
                return default
        return value

class CoordinateDatabase:
    """–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    
    def __init__(self, db_path: str = "data/coordinates.db"):
        self.db_path = db_path
        self._init_database()
    
    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        Path(self.db_path).parent.mkdir(exist_ok=True)
        
        with sqlite3.connect(self.db_path) as conn:
            conn.execute("""
                CREATE TABLE IF NOT EXISTS coordinates (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    extension_name TEXT NOT NULL,
                    action_type TEXT NOT NULL,
                    screen_width INTEGER NOT NULL,
                    screen_height INTEGER NOT NULL,
                    x INTEGER NOT NULL,
                    y INTEGER NOT NULL,
                    success_count INTEGER DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
    
    def save_coordinates(self, extension_name: str, action_type: str,
                        screen_resolution: Tuple[int, int],
                        coordinates: Tuple[int, int]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute("""
                    INSERT OR REPLACE INTO coordinates 
                    (extension_name, action_type, screen_width, screen_height, x, y)
                    VALUES (?, ?, ?, ?, ?, ?)
                """, (extension_name, action_type, screen_resolution[0],
                      screen_resolution[1], coordinates[0], coordinates[1]))
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
            return False
    
    def get_coordinates(self, extension_name: str, action_type: str,
                       screen_resolution: Tuple[int, int]) -> Optional[Tuple[int, int]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.execute("""
                    SELECT x, y FROM coordinates 
                    WHERE extension_name = ? AND action_type = ? 
                    AND screen_width = ? AND screen_height = ?
                    ORDER BY success_count DESC
                    LIMIT 1
                """, (extension_name, action_type, screen_resolution[0], screen_resolution[1]))
                
                result = cursor.fetchone()
                return (result[0], result[1]) if result else None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
            return None

class ProfileManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π –±—Ä–∞—É–∑–µ—Ä–∞"""
    
    def __init__(self, profiles_count: int = 30):
        self.profiles_count = profiles_count
        self.profiles: List[BrowserProfile] = []
        self.active_profiles: Dict[str, Any] = {}
        self._generate_profiles()
    
    def _generate_profiles(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
        ]
        
        viewports = [
            {"width": 1920, "height": 1080},
            {"width": 1440, "height": 900},
            {"width": 1366, "height": 768}
        ]
        
        locales = ["en-US", "en-GB", "de-DE", "fr-FR"]
        timezones = ["America/New_York", "Europe/London", "Europe/Berlin", "Europe/Paris"]
        
        for i in range(self.profiles_count):
            profile = BrowserProfile(
                id=f"profile_{i:02d}",
                name=f"Profile {i+1}",
                user_agent=random.choice(user_agents),
                viewport=random.choice(viewports),
                locale=random.choice(locales),
                timezone=random.choice(timezones),
                extensions=["rabby_wallet"]
            )
            self.profiles.append(profile)
    
    def get_profile(self, profile_id: str) -> Optional[BrowserProfile]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ ID"""
        for profile in self.profiles:
            if profile.id == profile_id:
                return profile
        return None
    
    def get_available_profile(self) -> Optional[BrowserProfile]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å"""
        for profile in self.profiles:
            if profile.id not in self.active_profiles:
                return profile
        return None

class UniversalBrowserAutomator:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞"""
    
    def __init__(self, config_path: str = "config.json"):
        self.config = ConfigManager(config_path)
        self.coordinate_db = CoordinateDatabase()
        self.profile_manager = ProfileManager(30)
        self.playwright = None
        self.browsers: Dict[str, Any] = {}
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Universal Browser Automator")
        
        if not PLAYWRIGHT_AVAILABLE:
            print("‚ùå Playwright –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        try:
            self.playwright = await async_playwright().start()
            print("‚úÖ Playwright –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        print("–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤")
        
        for browser in self.browsers.values():
            try:
                await browser.close()
            except:
                pass
        
        if self.playwright:
            try:
                await self.playwright.stop()
            except:
                pass
        
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    async def create_browser_context(self, profile: BrowserProfile):
        """–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            if profile.id not in self.browsers:
                browser = await self.playwright.chromium.launch(
                    headless=self.config.get("browser.headless", False)
                )
                self.browsers[profile.id] = browser
            
            context = await self.browsers[profile.id].new_context(
                user_agent=profile.user_agent,
                viewport=profile.viewport,
                locale=profile.locale,
                timezone_id=profile.timezone
            )
            
            self.profile_manager.active_profiles[profile.id] = context
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è {profile.id}")
            return context
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            raise

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
async def test_browser_core():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ browser_automation_core...")
    
    automator = UniversalBrowserAutomator()
    
    if not await automator.initialize():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É")
        return False
    
    try:
        profile = automator.profile_manager.get_available_profile()
        if profile:
            print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω: {profile.id}")
            
            if PLAYWRIGHT_AVAILABLE:
                context = await automator.create_browser_context(profile)
                page = await context.new_page()
                
                await page.goto("https://example.com")
                print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                
                await context.close()
            
        print("‚úÖ –¢–µ—Å—Ç browser_automation_core –ø—Ä–æ–π–¥–µ–Ω!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        return False
    
    finally:
        await automator.cleanup()

if __name__ == "__main__":
    asyncio.run(test_browser_core())
'''
    
    with open("core/browser_automation_core.py", "w", encoding="utf-8") as f:
        f.write(content)
    print("   ‚úÖ core/browser_automation_core.py")

def create_extension_handler():
    """–°–æ–∑–¥–∞—Ç—å extension_handler.py"""
    content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Extension Handler - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –∫–æ—à–µ–ª—å–∫–æ–≤
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å Rabby, Phantom –∏ –¥—Ä—É–≥–∏–º–∏ –∫–æ—à–µ–ª—å–∫–∞–º–∏
"""

import asyncio
import base64
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass
from enum import Enum

try:
    from playwright.async_api import Page, BrowserContext
    PLAYWRIGHT_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è Playwright –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    PLAYWRIGHT_AVAILABLE = False

class WalletType(str, Enum):
    RABBY = "rabby"
    PHANTOM = "phantom"
    METAMASK = "metamask"

class ActionType(str, Enum):
    CONNECT = "connect"
    CONFIRM = "confirm"
    APPROVE = "approve"
    REJECT = "reject"
    SIGN = "sign"

@dataclass
class WalletExtension:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞"""
    name: str
    wallet_type: WalletType
    extension_id: Optional[str] = None
    default_coordinates: Dict[str, Tuple[int, int]] = None
    
    def __post_init__(self):
        if self.default_coordinates is None:
            self.default_coordinates = {}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–æ–≤
WALLET_CONFIGS = {
    WalletType.RABBY: WalletExtension(
        name="Rabby Wallet",
        wallet_type=WalletType.RABBY,
        extension_id="acmacodkjbdgmoleebolmdjonilkdbch",
        default_coordinates={
            "connect": (720, 450),
            "confirm": (720, 500),
            "approve": (720, 480),
            "reject": (600, 500),
            "sign": (720, 470)
        }
    ),
    
    WalletType.PHANTOM: WalletExtension(
        name="Phantom Wallet",
        wallet_type=WalletType.PHANTOM,
        extension_id="bfnaelmomeimhlpmgjnjophhpkkoljpa",
        default_coordinates={
            "connect": (720, 450),
            "approve": (720, 500),
            "sign": (720, 470),
            "reject": (600, 500)
        }
    )
}

class ExtensionDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π"""
    
    def __init__(self):
        self.detection_cache = {}
    
    async def detect_extension_popup(self, page: Page) -> Optional[WalletExtension]:
        """–û–±–Ω–∞—Ä—É–∂–∏—Ç—å –ø–æ–ø–∞–ø —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"""
        if not PLAYWRIGHT_AVAILABLE:
            return None
            
        try:
            # –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
            extension_page = await self._find_extension_page(page)
            if extension_page:
                return await self._identify_wallet_from_page(extension_page)
            
            return None
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {e}")
            return None
    
    async def _find_extension_page(self, page: Page) -> Optional[Page]:
        """–ù–∞–π—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"""
        try:
            all_pages = page.context.pages
            
            for p in all_pages:
                url = p.url
                if "chrome-extension://" in url:
                    for wallet_config in WALLET_CONFIGS.values():
                        if wallet_config.extension_id and wallet_config.extension_id in url:
                            return p
            
            return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {e}")
            return None
    
    async def _identify_wallet_from_page(self, extension_page: Page) -> Optional[WalletExtension]:
        """–ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∫–æ—à–µ–ª–µ–∫ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        try:
            url = extension_page.url
            
            for wallet_type, wallet_config in WALLET_CONFIGS.items():
                if wallet_config.extension_id and wallet_config.extension_id in url:
                    return wallet_config
            
            return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞: {e}")
            return None

class ExtensionActionHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏"""
    
    def __init__(self, coordinate_db, ai_client=None):
        self.coordinate_db = coordinate_db
        self.ai_client = ai_client
        self.detector = ExtensionDetector()
    
    async def perform_wallet_action(self, page: Page, action_type: str,
                                  wallet_type: Optional[WalletType] = None) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ—à–µ–ª—å–∫–æ–º"""
        print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ—à–µ–ª—å–∫–∞: {action_type}")
        
        if not PLAYWRIGHT_AVAILABLE:
            print("‚ùå Playwright –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        try:
            # –û–±–Ω–∞—Ä—É–∂–∏—Ç—å –∫–æ—à–µ–ª–µ–∫
            detected_wallet = await self.detector.detect_extension_popup(page)
            
            if not detected_wallet:
                print("‚ö†Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
                if wallet_type and wallet_type in WALLET_CONFIGS:
                    detected_wallet = WALLET_CONFIGS[wallet_type]
                else:
                    return False
            
            print(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ—à–µ–ª–µ–∫: {detected_wallet.name}")
            
            # –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
            viewport = page.viewport_size
            screen_resolution = (viewport["width"], viewport["height"])
            
            # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            success = await self._try_action_strategies(
                page, detected_wallet, action_type, screen_resolution
            )
            
            return success
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –∫–æ—à–µ–ª—å–∫–∞: {e}")
            return False
    
    async def _try_action_strategies(self, page: Page, wallet_config: WalletExtension,
                                   action_type: str, screen_resolution: Tuple[int, int]) -> bool:
        """–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
        
        strategies = [
            self._try_saved_coordinates,
            self._try_default_coordinates,
            self._try_dom_selector
        ]
        
        for strategy in strategies:
            try:
                print(f"–ü–æ–ø—ã—Ç–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {strategy.__name__}")
                success = await strategy(page, wallet_config, action_type, screen_resolution)
                
                if success:
                    await asyncio.sleep(1)  # –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    return True
                    
            except Exception as e:
                print(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy.__name__} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                continue
        
        return False
    
    async def _try_saved_coordinates(self, page: Page, wallet_config: WalletExtension,
                                   action_type: str, screen_resolution: Tuple[int, int]) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏"""
        coords = self.coordinate_db.get_coordinates(
            wallet_config.wallet_type, action_type, screen_resolution
        )
        
        if coords:
            await page.mouse.click(coords[0], coords[1])
            print(f"‚úÖ –ö–ª–∏–∫ –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: {coords}")
            return True
        
        return False
    
    async def _try_default_coordinates(self, page: Page, wallet_config: WalletExtension,
                                     action_type: str, screen_resolution: Tuple[int, int]) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        default_coords = wallet_config.default_coordinates.get(action_type)
        
        if default_coords:
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            scaled_coords = self._scale_coordinates(default_coords, screen_resolution, (1440, 900))
            
            await page.mouse.click(scaled_coords[0], scaled_coords[1])
            print(f"‚úÖ –ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {scaled_coords}")
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            self.coordinate_db.save_coordinates(
                wallet_config.wallet_type, action_type, screen_resolution, scaled_coords
            )
            return True
        
        return False
    
    async def _try_dom_selector(self, page: Page, wallet_config: WalletExtension,
                              action_type: str, screen_resolution: Tuple[int, int]) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ —Å DOM —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏"""
        # –ù–∞–π—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        extension_page = await self.detector._find_extension_page(page)
        
        if not extension_page:
            return False
        
        # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –∫–æ—à–µ–ª—å–∫–∞
        selectors = {
            "connect": ["button:has-text('Connect')", "[data-testid='connect']"],
            "confirm": ["button:has-text('Confirm')", "[data-testid='confirm']"],
            "approve": ["button:has-text('Approve')", "[data-testid='approve']"],
            "sign": ["button:has-text('Sign')", "[data-testid='sign']"]
        }
        
        action_selectors = selectors.get(action_type, [])
        
        for selector in action_selectors:
            try:
                element = await extension_page.wait_for_selector(selector, timeout=2000)
                if element:
                    await element.click()
                    print(f"‚úÖ –ö–ª–∏–∫ –ø–æ DOM —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
                    return True
            except:
                continue
        
        return False
    
    def _scale_coordinates(self, coords: Tuple[int, int],
                          current_resolution: Tuple[int, int],
                          base_resolution: Tuple[int, int]) -> Tuple[int, int]:
        """–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"""
        scale_x = current_resolution[0] / base_resolution[0]
        scale_y = current_resolution[1] / base_resolution[1]
        
        return (int(coords[0] * scale_x), int(coords[1] * scale_y))

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
async def test_extension_handler():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ extension_handler...")
    
    if not PLAYWRIGHT_AVAILABLE:
        print("‚ö†Ô∏è Playwright –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return True
    
    try:
        from browser_automation_core import UniversalBrowserAutomator
        
        automator = UniversalBrowserAutomator()
        
        if not await automator.initialize():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É")
            return False
        
        extension_handler = ExtensionActionHandler(automator.coordinate_db)
        
        profile = automator.profile_manager.get_available_profile()
        context = await automator.create_browser_context(profile)
        page = await context.new_page()
        
        await page.goto("https://example.com")
        
        # –¢–µ—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        success = await extension_handler.perform_wallet_action(
            page, "connect", WalletType.RABBY
        )
        
        print(f"‚úÖ –¢–µ—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è –∫–æ—à–µ–ª—å–∫–∞: {success}")
        
        await context.close()
        await automator.cleanup()
        
        print("‚úÖ –¢–µ—Å—Ç extension_handler –ø—Ä–æ–π–¥–µ–Ω!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        return False

if __name__ == "__main__":
    asyncio.run(test_extension_handler())
'''
    
    with open("core/extension_handler.py", "w", encoding="utf-8") as f:
        f.write(content)
    print("   ‚úÖ core/extension_handler.py")

def create_simple_main():
    """–°–æ–∑–¥–∞—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≥–ª–∞–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É"""
    content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Simple Main System - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≥–ª–∞–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–µ–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π
"""

import asyncio
import json
from pathlib import Path
from typing import Dict, List, Optional, Any
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from browser_automation_core import UniversalBrowserAutomator, ConfigManager
    from extension_handler import ExtensionActionHandler, WalletType
    MODULES_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    MODULES_AVAILABLE = False

class SimpleAutomationSystem:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self):
        if not MODULES_AVAILABLE:
            print("‚ùå –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return
            
        self.automator = UniversalBrowserAutomator()
        self.extension_handler = None
        self.running = False
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        if not MODULES_AVAILABLE:
            return False
            
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Simple Automation System...")
        
        try:
            success = await self.automator.initialize()
            if not success:
                return False
            
            self.extension_handler = ExtensionActionHandler(
                self.automator.coordinate_db
            )
            
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if MODULES_AVAILABLE and self.automator:
            await self.automator.cleanup()
        print("‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
    
    async def test_basic_functionality(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
        
        if not await self.initialize():
            return False
        
        try:
            # –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
            profile = self.automator.profile_manager.get_available_profile()
            if not profile:
                print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")
                return False
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å: {profile.id}")
            
            # –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞
            context = await self.automator.create_browser_context(profile)
            page = await context.new_page()
            
            # –û—Ç–∫—Ä—ã—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await page.goto("https://example.com")
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
            # –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç
            screenshot_path = Path("screenshots") / "test_screenshot.png"
            screenshot_path.parent.mkdir(exist_ok=True)
            await page.screenshot(path=str(screenshot_path))
            print(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path}")
            
            # –¢–µ—Å—Ç –¥–µ–π—Å—Ç–≤–∏–π –∫–æ—à–µ–ª—å–∫–∞
            print("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∫–æ—à–µ–ª—å–∫–∞...")
            success = await self.extension_handler.perform_wallet_action(
                page, "connect", WalletType.RABBY
            )
            print(f"‚úÖ –¢–µ—Å—Ç –∫–æ—à–µ–ª—å–∫–∞: {'–£—Å–ø–µ—Ö' if success else '–ù–µ—É–¥–∞—á–∞'}")
            
            # –ó–∞–∫—Ä—ã—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
            await context.close()
            
            print("üéâ –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            return False
        
        finally:
            await self.cleanup()
    
    async def run_interactive_mode(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"""
        print("üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º Simple Automation System")
        print("=" * 50)
        
        if not await self.initialize():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É")
            return
        
        while True:
            try:
                print("\\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
                print("1. –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã")
                print("2. –û—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä")
                print("3. –¢–µ—Å—Ç –∫–æ—à–µ–ª—å–∫–∞")
                print("4. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
                print("0. –í—ã—Ö–æ–¥")
                
                choice = input("\\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (0-4): ").strip()
                
                if choice == "0":
                    break
                elif choice == "1":
                    await self.test_basic_functionality()
                elif choice == "2":
                    await self._open_browser_demo()
                elif choice == "3":
                    await self._test_wallet_demo()
                elif choice == "4":
                    self._show_system_info()
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                    
            except KeyboardInterrupt:
                print("\\n\\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        await self.cleanup()
        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    
    async def _open_browser_demo(self):
        """–î–µ–º–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞"""
        print("üåê –û—Ç–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞...")
        
        try:
            profile = self.automator.profile_manager.get_available_profile()
            context = await self.automator.create_browser_context(profile)
            page = await context.new_page()
            
            await page.goto("https://google.com")
            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç –Ω–∞ Google")
            
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...")
            await context.close()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
    
    async def _test_wallet_demo(self):
        """–î–µ–º–æ —Ç–µ—Å—Ç–∞ –∫–æ—à–µ–ª—å–∫–∞"""
        print("üí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞...")
        
        try:
            profile = self.automator.profile_manager.get_available_profile()
            context = await self.automator.create_browser_context(profile)
            page = await context.new_page()
            
            await page.goto("https://app.uniswap.org")
            print("‚úÖ –û—Ç–∫—Ä—ã—Ç Uniswap")
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –∫–ª–∏–∫–∞ –Ω–∞ Connect Wallet
            try:
                await page.click("text=Connect Wallet", timeout=5000)
                print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ Connect Wallet")
                
                await asyncio.sleep(2)
                
                # –¢–µ—Å—Ç –¥–µ–π—Å—Ç–≤–∏–π –∫–æ—à–µ–ª—å–∫–∞
                success = await self.extension_handler.perform_wallet_action(
                    page, "connect", WalletType.RABBY
                )
                print(f"‚úÖ –¢–µ—Å—Ç –∫–æ—à–µ–ª—å–∫–∞: {'–£—Å–ø–µ—Ö' if success else '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏'}")
                
            except Exception:
                print("‚ÑπÔ∏è –ö–Ω–æ–ø–∫–∞ Connect Wallet –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞)")
            
            await context.close()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫–æ—à–µ–ª—å–∫–∞: {e}")
    
    def _show_system_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
        print("\\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:")
        print(f"–ú–æ–¥—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã: {'‚úÖ' if MODULES_AVAILABLE else '‚ùå'}")
        print(f"–í—Å–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {len(self.automator.profile_manager.profiles) if MODULES_AVAILABLE else 'N/A'}")
        print(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π: {len(self.automator.profile_manager.active_profiles) if MODULES_AVAILABLE else 'N/A'}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_exists = Path("config.json").exists()
        print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {'‚úÖ' if config_exists else '‚ùå'}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_exists = Path("data/coordinates.db").exists()
        print(f"–ë–∞–∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {'‚úÖ' if db_exists else '‚ùå'}")

class SimpleCLI:
    """–ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    
    def __init__(self):
        self.system = SimpleAutomationSystem()
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ CLI"""
        print("ü§ñ Universal Browser Automation - Simple System")
        print("=" * 50)
        
        await self.system.run_interactive_mode()

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import sys
    
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        system = SimpleAutomationSystem()
        
        if command == "test":
            await system.test_basic_functionality()
        elif command == "interactive":
            await system.run_interactive_mode()
        else:
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: test, interactive")
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        cli = SimpleCLI()
        await cli.run()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
'''
    
    with open("core/simple_main.py", "w", encoding="utf-8") as f:
        f.write(content)
    print("   ‚úÖ core/simple_main.py")

def create_core_init():
    """–°–æ–∑–¥–∞—Ç—å core/__init__.py"""
    content = '''# -*- coding: utf-8 -*-
"""
Universal Browser Automation System - Core Package
–û—Å–Ω–æ–≤–Ω–æ–π –ø–∞–∫–µ—Ç —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
"""

try:
    from .browser_automation_core import (
        UniversalBrowserAutomator,
        ConfigManager,
        CoordinateDatabase,
        ProfileManager,
        BrowserProfile
    )
    BROWSER_CORE_AVAILABLE = True
except ImportError:
    BROWSER_CORE_AVAILABLE = False

try:
    from .extension_handler import (
        ExtensionActionHandler,
        ExtensionDetector,
        WalletType,
        ActionType,
        WalletExtension
    )
    EXTENSION_HANDLER_AVAILABLE = True
except ImportError:
    EXTENSION_HANDLER_AVAILABLE = False

try:
    from .simple_main import (
        SimpleAutomationSystem,
        SimpleCLI
    )
    SIMPLE_MAIN_AVAILABLE = True
except ImportError:
    SIMPLE_MAIN_AVAILABLE = False

__version__ = "1.0.0"
__author__ = "Universal Browser Automation Team"

# –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
__all__ = []

if BROWSER_CORE_AVAILABLE:
    __all__.extend([
        "UniversalBrowserAutomator",
        "ConfigManager", 
        "CoordinateDatabase",
        "ProfileManager",
        "BrowserProfile"
    ])

if EXTENSION_HANDLER_AVAILABLE:
    __all__.extend([
        "ExtensionActionHandler",
        "ExtensionDetector",
        "WalletType",
        "ActionType", 
        "WalletExtension"
    ])

if SIMPLE_MAIN_AVAILABLE:
    __all__.extend([
        "SimpleAutomationSystem",
        "SimpleCLI"
    ])
'''
    
    with open("core/__init__.py", "w", encoding="utf-8") as f:
        f.write(content)
    print("   ‚úÖ core/__init__.py")

def create_config_files():
    """–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    print("\\n‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    # config.json
    config = {
        "browser": {
            "headless": False,
            "timeout": 30000,
            "viewport": {"width": 1440, "height": 900}
        },
        "ai": {
            "provider": "openai",
            "api_key": "",
            "model": "gpt-4-vision-preview"
        },
        "automation": {
            "human_delays": True,
            "screenshot_on_error": True
        },
        "profiles": {"count": 30},
        "logging": {"level": "INFO", "file": "logs/automation.log"}
    }
    
    with open("config.json", "w", encoding="utf-8") as f:
        json.dump(config, f, indent=2, ensure_ascii=False)
    print("   ‚úÖ config.json")
    
    # .env —Ñ–∞–π–ª
    env_content = """# Universal Browser Automation - Environment Variables

# AI API Keys (–∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω)
OPENAI_API_KEY=your_openai_api_key_here
ANTHROPIC_API_KEY=your_anthropic_api_key_here
DEEPSEEK_API_KEY=your_deepseek_api_key_here

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
DEBUG_MODE=false
LOG_LEVEL=INFO
"""
    
    with open(".env", "w", encoding="utf-8") as f:
        f.write(env_content)
    print("   ‚úÖ .env")
    
    # requirements.txt
    requirements = """# Universal Browser Automation System - Fixed Version

# Core browser automation
playwright>=1.40.0

# AI integration (optional)
openai>=1.3.8

# Data validation
pydantic>=2.5.0

# Configuration
PyYAML>=6.0.1

# Image processing (optional)
Pillow>=10.1.0

# Logging
loguru>=0.7.2

# Environment variables
python-dotenv>=1.0.0
"""
    
    with open("requirements.txt", "w", encoding="utf-8") as f:
        f.write(requirements)
    print("   ‚úÖ requirements.txt")

def create_simple_launcher():
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π –ª–∞—É–Ω—á–µ—Ä"""
    content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Simple Launcher - –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º core –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent / "core"))

async def simple_test():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã"""
    print("üß™ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        from simple_main import SimpleAutomationSystem
        
        system = SimpleAutomationSystem()
        success = await system.test_basic_functionality()
        
        if success:
            print("\\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        else:
            print("\\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
            print("pip install -r requirements.txt")
            print("playwright install chromium")
        
        return success
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False

async def interactive_mode():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"""
    try:
        from simple_main import SimpleCLI
        
        cli = SimpleCLI()
        await cli.run()
        
    except ImportError:
        print("‚ùå –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞–Ω–æ–≤–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def show_help():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = """
ü§ñ Universal Browser Automation - Simple Launcher

–ö–æ–º–∞–Ω–¥—ã:
  test        - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã
  interactive - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
  help        - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  python simple_launcher.py test
  python simple_launcher.py interactive
  python simple_launcher.py

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
  Python 3.8+
  pip install -r requirements.txt
  playwright install chromium
"""
    print(help_text)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ Universal Browser Automation - Simple Launcher")
    print("=" * 50)
    
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == "test":
            await simple_test()
        elif command == "interactive":
            await interactive_mode()
        elif command == "help":
            show_help()
        else:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
            show_help()
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:\\n1. –¢–µ—Å—Ç\\n2. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π\\n–í—ã–±–æ—Ä (1/2): ")
        
        if choice == "1":
            await simple_test()
        else:
            await interactive_mode()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
'''
    
    with open("simple_launcher.py", "w", encoding="utf-8") as f:
        f.write(content)
    print("   ‚úÖ simple_launcher.py")

def create_databases():
    """–°–æ–∑–¥–∞—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("\\nüíæ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    coord_db_path = "data/coordinates.db"
    Path(coord_db_path).parent.mkdir(exist_ok=True)
    
    with sqlite3.connect(coord_db_path) as conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS coordinates (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                extension_name TEXT NOT NULL,
                action_type TEXT NOT NULL,
                screen_width INTEGER NOT NULL,
                screen_height INTEGER NOT NULL,
                x INTEGER NOT NULL,
                y INTEGER NOT NULL,
                success_count INTEGER DEFAULT 1,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        initial_coords = [
            ("rabby", "connect", 1440, 900, 720, 450),
            ("rabby", "confirm", 1440, 900, 720, 500),
            ("rabby", "approve", 1440, 900, 720, 480),
            ("phantom", "connect", 1440, 900, 720, 450),
            ("phantom", "approve", 1440, 900, 720, 500)
        ]
        
        for coord in initial_coords:
            conn.execute("""
                INSERT OR IGNORE INTO coordinates 
                (extension_name, action_type, screen_width, screen_height, x, y)
                VALUES (?, ?, ?, ?, ?, ?)
            """, coord)
    
    print("   ‚úÖ data/coordinates.db (—Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏)")

def create_example_project():
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞"""
    print("\\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞...")
    
    try:
        import yaml
        
        example_project = {
            "project_id": "example_defi",
            "project_name": "Example DeFi Protocol", 
            "description": "–ü—Ä–∏–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ DeFi –ø—Ä–æ–µ–∫—Ç–∞",
            "site_url": "https://app.example-defi.com",
            "flows": {
                "registration": {
                    "name": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    "actions": [
                        {
                            "name": "–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç",
                            "type": "navigate",
                            "url": "https://app.example-defi.com"
                        },
                        {
                            "name": "–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", 
                            "type": "connect_wallet",
                            "wallet": "rabby"
                        }
                    ]
                }
            }
        }
        
        with open("projects/example_defi.yaml", "w", encoding="utf-8") as f:
            yaml.dump(example_project, f, default_flow_style=False, allow_unicode=True)
        print("   ‚úÖ projects/example_defi.yaml")
        
    except ImportError:
        # –°–æ–∑–¥–∞—Ç—å JSON –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ yaml –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        example_project = {
            "project_id": "example_defi",
            "project_name": "Example DeFi Protocol",
            "description": "–ü—Ä–∏–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ DeFi –ø—Ä–æ–µ–∫—Ç–∞"
        }
        
        with open("projects/example_defi.json", "w", encoding="utf-8") as f:
            json.dump(example_project, f, indent=2, ensure_ascii=False)
        print("   ‚úÖ projects/example_defi.json")

def create_readme():
    """–°–æ–∑–¥–∞—Ç—å README"""
    readme_content = """# Universal Browser Automation System - Fixed Version

ü§ñ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è Web3 –∏ DeFi –∑–∞–¥–∞—á.

## ‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

- **30 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –±—Ä–∞—É–∑–µ—Ä–∞**
- **–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ Rabby –∏ Phantom**
- **–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–µ–π—Å—Ç–≤–∏–π**
- **AI fallback (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)**
- **–ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π**

## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

### 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
```bash
pip install -r requirements.txt
playwright install chromium
```

### 2. –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã
```bash
python simple_launcher.py test
```

### 3. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
```bash
python simple_launcher.py interactive
```

## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞

```
core/                           # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
‚îú‚îÄ‚îÄ browser_automation_core.py  # –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–æ—Ä
‚îú‚îÄ‚îÄ extension_handler.py        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—à–µ–ª—å–∫–æ–≤
‚îú‚îÄ‚îÄ simple_main.py              # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
‚îî‚îÄ‚îÄ __init__.py                 # –ü–∞–∫–µ—Ç

projects/                       # –ü—Ä–æ–µ–∫—Ç—ã
data/                          # –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö  
logs/                          # –õ–æ–≥–∏
screenshots/                   # –°–∫—Ä–∏–Ω—à–æ—Ç—ã
browser_profiles/              # –ü—Ä–æ—Ñ–∏–ª–∏ (30 —à—Ç—É–∫)
```

## ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–µ–π (.env):
```
OPENAI_API_KEY=your_key_here
```

### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã (config.json):
```json
{
  "browser": {
    "headless": false,
    "viewport": {"width": 1440, "height": 900}
  }
}
```

## üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

```bash
# –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
python simple_launcher.py test

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
python simple_launcher.py interactive
```

## üîß –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

### –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤:
- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤ (Rabby, Phantom)
- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã–µ –∫–ª–∏–∫–∏ —Å fallback

### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏:
- 30 –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –±—Ä–∞—É–∑–µ—Ä–∞
- –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ User-Agent, viewport, –ª–æ–∫–∞–ª–∏
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è

### –ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

## üÜò –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º

### Playwright –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:
```bash
pip install playwright
playwright install chromium
```

### –ú–æ–¥—É–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:
```bash
# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤
python simple_launcher.py test
```

### –ö–æ—à–µ–ª–µ–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:
- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

## ‚ö†Ô∏è –í–∞–∂–Ω–æ

- –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ AI –∫–ª—é—á–µ–π (—Ç–æ–ª—å–∫–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
- –° AI –∫–ª—é—á–∞–º–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è fallback —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
- –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

---

–°–æ–∑–¥–∞–Ω–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ Web3 –∏ DeFi –∑–∞–¥–∞—á üöÄ
"""
    
    with open("README.md", "w", encoding="utf-8") as f:
        f.write(readme_content)
    print("   ‚úÖ README.md")

def create_gitignore():
    """–°–æ–∑–¥–∞—Ç—å .gitignore"""
    gitignore_content = """# Python
__pycache__/
*.py[cod]
*.so
*.egg-info/
build/
dist/

# Environment
.env
venv/
env/

# Browser data
browser_profiles/*/
downloads/*/

# Logs and screenshots
logs/*.log
screenshots/*.png

# Databases
data/*.db

# OS
.DS_Store
Thumbs.db

# IDE
.vscode/
.idea/

# API Keys
*_key*
secrets.*
"""
    
    with open(".gitignore", "w", encoding="utf-8") as f:
        f.write(gitignore_content)
    print("   ‚úÖ .gitignore")

def print_completion_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    info = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                                  ‚ïë
‚ïë              üéâ –°–ò–°–¢–ï–ú–ê –°–û–ó–î–ê–ù–ê –£–°–ü–ï–®–ù–û! üéâ                     ‚ïë
‚ïë                                                                  ‚ïë
‚ïë              –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –æ—à–∏–±–æ–∫ –æ—Ç—Å—Ç—É–ø–æ–≤             ‚ïë
‚ïë                                                                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìã –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:

üîß –û–°–ù–û–í–ù–´–ï –ú–û–î–£–õ–ò:
   ‚úÖ core/browser_automation_core.py    # –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–æ—Ä
   ‚úÖ core/extension_handler.py          # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—à–µ–ª—å–∫–æ–≤
   ‚úÖ core/simple_main.py                # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
   ‚úÖ core/__init__.py                   # –ü–∞–∫–µ—Ç core

‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:
   ‚úÖ config.json                        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
   ‚úÖ .env                               # API –∫–ª—é—á–∏
   ‚úÖ requirements.txt                   # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
   ‚úÖ .gitignore                         # Git –∏—Å–∫–ª—é—á–µ–Ω–∏—è

üöÄ –ó–ê–ü–£–°–ö:
   ‚úÖ simple_launcher.py                 # –ì–ª–∞–≤–Ω—ã–π –ª–∞—É–Ω—á–µ—Ä

üíæ –î–ê–ù–ù–´–ï:
   ‚úÖ data/coordinates.db                # –ë–∞–∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (—Å –¥–∞–Ω–Ω—ã–º–∏)

üìÅ –°–¢–†–£–ö–¢–£–†–ê:
   ‚úÖ {len([d for d in Path(".").rglob("*") if d.is_dir()])} –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω–æ
   ‚úÖ –ü—Ä–æ—Ñ–∏–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ (30 —à—Ç—É–∫)

üìö –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø:
   ‚úÖ README.md                          # –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:

1Ô∏è‚É£ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô:
   pip install -r requirements.txt
   playwright install chromium

2Ô∏è‚É£ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´:
   python simple_launcher.py test

3Ô∏è‚É£ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú:
   python simple_launcher.py interactive

4Ô∏è‚É£ –ù–ê–°–¢–†–û–ô–ö–ê API (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):
   –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ API –∫–ª—é—á–∞–º–∏

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í –≠–¢–û–ô –í–ï–†–°–ò–ò:

üîß –û—Ç—Å—Ç—É–ø—ã:
   ‚Ä¢ –í—Å–µ –æ—Ç—Å—Ç—É–ø—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
   ‚Ä¢ –£–±—Ä–∞–Ω—ã –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

üõ°Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫:
   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω—ã try/except –±–ª–æ–∫–∏
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Playwright
   ‚Ä¢ Graceful degradation –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –º–æ–¥—É–ª–µ–π

üí° –£–ø—Ä–æ—â–µ–Ω–∏–µ:
   ‚Ä¢ –£–±—Ä–∞–Ω–∞ –∏–∑–ª–∏—à–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
   ‚Ä¢ –§–æ–∫—É—Å –Ω–∞ core —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
   ‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∫–æ–¥

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üéØ –û–°–ù–û–í–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:

‚Ä¢ 30 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –±—Ä–∞—É–∑–µ—Ä–∞
‚Ä¢ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∫–æ—à–µ–ª—å–∫–æ–≤
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Rabby –∏ Phantom
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é! üéâ
    """
    print(info)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    print_banner()
    
    try:
        print("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ Universal Browser Automation System...")
        print("=" * 60)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        create_directories()
        
        print("\\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π...")
        create_browser_core()
        create_extension_handler()
        create_simple_main()
        create_core_init()
        
        print("\\n‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        create_config_files()
        
        print("\\nüöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ª–∞—É–Ω—á–µ—Ä–∞...")
        create_simple_launcher()
        
        print("\\nüíæ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö...")
        create_databases()
        
        print("\\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤...")
        create_example_project()
        
        print("\\nüìö –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
        create_readme()
        create_gitignore()
        
        print("\\nüéâ –í–°–ï –§–ê–ô–õ–´ –°–û–ó–î–ê–ù–´!")
        print_completion_info()
        
        return True
        
    except Exception as e:
        print(f"\\n‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    if not success:
        exit(1)