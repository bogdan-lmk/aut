#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Billions Network Automation - Organized Version
===============================================

–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è https://signup.billions.network/
–†–∞–∑–º–µ—â–µ–Ω–∏–µ: projects/billions_automation.py
"""

import asyncio
import sys
from pathlib import Path

# –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
project_root = Path(__file__).parent.parent  # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ –∏–∑ projects/
sys.path.append(str(project_root / "core"))

class BillionsNetworkAutomator:
    """–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è Billions Network"""
    
    def __init__(self):
        self.project_name = "billions_network"
        self.site_url = "https://signup.billions.network/"
        self.target_button_selectors = [
            # –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Click & Earn 25 power"
            'button.ant-btn.ant-btn-primary:has-text("Click & Earn")',
            'button:has-text("Click & Earn 25 power")',
            'button:has-text("Click & Earn")',
            '.ant-btn-primary:has-text("Click")',
            '.ant-btn.css-1xy5zgx:has-text("Click")',
            'button[type="button"]:has-text("Click")',
            'button:has-text("25 power")',
            'text=Click & Earn',
            'text=Click & Earn 25 power'
        ]
        
        # –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
        self.screenshots_dir = project_root / "screenshots" / self.project_name
        self.screenshots_dir.mkdir(parents=True, exist_ok=True)
    
    async def run_automation(self, profile_count=1):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        print(f"üöÄ Billions Network Automation")
        print(f"üìç –°–∞–π—Ç: {self.site_url}")
        print(f"üë• –ü—Ä–æ—Ñ–∏–ª–µ–π: {profile_count}")
        print("=" * 50)
        
        try:
            from browser_automation_core import UniversalBrowserAutomator
            from extension_handler import ExtensionActionHandler, WalletType
            
            automator = UniversalBrowserAutomator()
            
            if not await automator.initialize():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä–Ω—É—é —Å–∏—Å—Ç–µ–º—É")
                return False
            
            extension_handler = ExtensionActionHandler(automator.coordinate_db)
            
            successful_profiles = 0
            failed_profiles = 0
            
            for i in range(profile_count):
                print(f"\nüë§ –ü—Ä–æ—Ñ–∏–ª—å {i+1}/{profile_count}")
                print("-" * 30)
                
                success = await self._process_single_profile(
                    automator, extension_handler, i
                )
                
                if success:
                    successful_profiles += 1
                    print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å {i+1}: –£–°–ü–ï–•")
                else:
                    failed_profiles += 1
                    print(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å {i+1}: –ù–ï–£–î–ê–ß–ê")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ—Ñ–∏–ª—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
                if i < profile_count - 1:
                    print("‚è≥ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã...")
                    await asyncio.sleep(3)
            
            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            print("\n" + "=" * 50)
            print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful_profiles}")
            print(f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {failed_profiles}")
            print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(successful_profiles/profile_count*100):.1f}%")
            print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç—ã: {self.screenshots_dir}")
            
            await automator.cleanup()
            return successful_profiles > 0
            
        except ImportError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
            print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
            print("   1. –ó–∞–ø—É—Å—Ç–∏–ª–∏: python create_system.py")
            print("   2. –§–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ projects/")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def _process_single_profile(self, automator, extension_handler, profile_index):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å"""
        try:
            # –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
            if profile_index < len(automator.profile_manager.profiles):
                profile = automator.profile_manager.profiles[profile_index]
            else:
                profile = automator.profile_manager.get_available_profile()
            
            if not profile:
                print(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
            
            print(f"üîß –ü—Ä–æ—Ñ–∏–ª—å: {profile.id} ({profile.user_agent.split()[7] if len(profile.user_agent.split()) > 7 else 'Chrome'})")
            
            # –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞
            context = await automator.create_browser_context(profile)
            page = await context.new_page()
            
            try:
                # –®–∞–≥ 1: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç
                print(f"üåê –ó–∞–≥—Ä—É–∑–∫–∞ {self.site_url}")
                await page.goto(self.site_url, wait_until="domcontentloaded", timeout=30000)
                await asyncio.sleep(3)  # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                
                # –®–∞–≥ 2: –ü–æ–∏—Å–∫ –∏ –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ
                button_clicked = await self._click_earn_button(page)
                
                if not button_clicked:
                    print("‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    await self._save_screenshot(page, profile.id, "button_not_found")
                    return False
                
                print("‚úÖ –ö–Ω–æ–ø–∫–∞ 'Click & Earn 25 power' –Ω–∞–∂–∞—Ç–∞!")
                
                # –®–∞–≥ 3: –ñ–¥–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
                await asyncio.sleep(3)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                page_changed = await self._check_page_changes(page)
                
                # –®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—à–µ–ª—å–∫–∞ (–µ—Å–ª–∏ –ø–æ—è–≤–∏–ª—Å—è)
                wallet_handled = await self._handle_wallet_popup(page, extension_handler)
                
                # –®–∞–≥ 5: –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
                await self._save_screenshot(page, profile.id, "success")
                
                if page_changed or wallet_handled:
                    print("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                    return True
                else:
                    print("‚ö†Ô∏è –†–µ–∞–∫—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ—è—Å–Ω–∞, –Ω–æ –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞")
                    return True
                
            finally:
                await context.close()
                automator.profile_manager.active_profiles.pop(profile.id, None)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return False
    
    async def _click_earn_button(self, page):
        """–ù–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –∫–Ω–æ–ø–∫—É Click & Earn"""
        print("üîç –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏...")
        
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—Å–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
        for i, selector in enumerate(self.target_button_selectors, 1):
            try:
                print(f"   {i}. {selector[:50]}...")
                
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
                element = await page.wait_for_selector(selector, timeout=3000)
                
                if element:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                    is_visible = await element.is_visible()
                    is_enabled = await element.is_enabled()
                    
                    if is_visible and is_enabled:
                        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–∞!")
                        
                        # –ü–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –∫ —ç–ª–µ–º–µ–Ω—Ç—É
                        await element.scroll_into_view_if_needed()
                        await asyncio.sleep(0.5)
                        
                        # –ö–ª–∏–∫ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
                        await element.click()
                        await asyncio.sleep(0.5)
                        
                        return True
                    else:
                        print(f"   ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–∞, –Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")
                
            except Exception:
                continue
        
        # –ï—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥
        print("üéØ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã–π –ø–æ–∏—Å–∫...")
        return await self._try_coordinate_click(page)
    
    async def _try_coordinate_click(self, page):
        """–ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
        try:
            viewport = page.viewport_size
            width = viewport["width"]
            height = viewport["height"]
            
            # –¢–∏–ø–∏—á–Ω—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞ signup —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
            coordinates = [
                (width // 2, height // 2),           # –¶–µ–Ω—Ç—Ä
                (width // 2, int(height * 0.6)),     # –ù–∏–∂–µ —Ü–µ–Ω—Ç—Ä–∞
                (width // 2, int(height * 0.4)),     # –í—ã—à–µ —Ü–µ–Ω—Ç—Ä–∞
                (width // 2, 400),                   # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞
                (width // 2, 350),
                (width // 2, 450),
            ]
            
            for i, (x, y) in enumerate(coordinates, 1):
                print(f"   {i}. –ö–ª–∏–∫ ({x}, {y})")
                
                await page.mouse.click(x, y)
                await asyncio.sleep(1)
                
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ URL –∏–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                try:
                    # –ñ–¥–µ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
                    await page.wait_for_function("document.readyState === 'complete'", timeout=2000)
                    return True
                except:
                    continue
            
            return False
            
        except Exception as e:
            print(f"   ‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã–π –∫–ª–∏–∫ –Ω–µ —É–¥–∞–ª—Å—è: {e}")
            return False
    
    async def _check_page_changes(self, page):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
            
            # 1. –ò–∑–º–µ–Ω–µ–Ω–∏–µ URL
            current_url = page.url
            if "success" in current_url.lower() or "complete" in current_url.lower():
                print("‚úÖ URL –∏–∑–º–µ–Ω–∏–ª—Å—è (—É—Å–ø–µ—Ö)")
                return True
            
            # 2. –ü–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            success_indicators = [
                'text=Success',
                'text=Earned',
                'text=Claimed',
                'text=Complete',
                '.success',
                '.earned',
                '[class*="success"]'
            ]
            
            for indicator in success_indicators:
                try:
                    element = await page.wait_for_selector(indicator, timeout=1000)
                    if element:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Å–ø–µ—Ö–∞: {indicator}")
                        return True
                except:
                    continue
            
            return False
            
        except Exception:
            return False
    
    async def _handle_wallet_popup(self, page, extension_handler):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å popup –∫–æ—à–µ–ª—å–∫–∞"""
        print("üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—à–µ–ª—å–∫–∞...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ popup –∫–æ—à–µ–ª—å–∫–∞
            await asyncio.sleep(2)
            
            # –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ—à–µ–ª—å–∫–∞
            for action in ["connect", "confirm", "approve", "sign"]:
                try:
                    success = await extension_handler.perform_wallet_action(page, action)
                    if success:
                        print(f"‚úÖ –ö–æ—à–µ–ª–µ–∫: {action}")
                        await asyncio.sleep(2)
                        return True
                except:
                    continue
            
            print("‚ÑπÔ∏è –ö–æ—à–µ–ª–µ–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return False
            
        except Exception:
            return False
    
    async def _save_screenshot(self, page, profile_id, status):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç"""
        try:
            from datetime import datetime
            timestamp = datetime.now().strftime('%H%M%S')
            filename = f"{self.project_name}_{status}_{profile_id}_{timestamp}.png"
            filepath = self.screenshots_dir / filename
            
            await page.screenshot(path=str(filepath), full_page=True)
            print(f"üì∏ {filepath.name}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {e}")

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π CLI –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
class ProjectAutomationCLI:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π CLI –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    
    def __init__(self, automator_class, project_name):
        self.automator = automator_class()
        self.project_name = project_name
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ CLI"""
        print(f"ü§ñ {self.project_name} Automation")
        print("=" * 50)
        
        while True:
            try:
                print(f"\nüìç –ü—Ä–æ–µ–∫—Ç: {self.project_name}")
                print(f"üåê –°–∞–π—Ç: {self.automator.site_url}")
                print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
                print("1. üß™ –¢–µ—Å—Ç (1 –ø—Ä–æ—Ñ–∏–ª—å)")
                print("2. üöÄ –ó–∞–ø—É—Å–∫ (5 –ø—Ä–æ—Ñ–∏–ª–µ–π)")
                print("3. üí™ –ú–∞—Å—Å–æ–≤—ã–π (10 –ø—Ä–æ—Ñ–∏–ª–µ–π)")
                print("4. üî• –ü–æ–ª–Ω—ã–π (30 –ø—Ä–æ—Ñ–∏–ª–µ–π)")
                print("5. ‚öôÔ∏è –í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
                print("0. üö™ –í—ã—Ö–æ–¥")
                
                choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (0-5): ").strip()
                
                if choice == "0":
                    break
                elif choice == "1":
                    await self.automator.run_automation(1)
                elif choice == "2":
                    await self.automator.run_automation(5)
                elif choice == "3":
                    await self.automator.run_automation(10)
                elif choice == "4":
                    print("‚ö†Ô∏è –ó–∞–ø—É—Å–∫ 30 –ø—Ä–æ—Ñ–∏–ª–µ–π –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!")
                    confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").lower()
                    if confirm == 'y':
                        await self.automator.run_automation(30)
                elif choice == "5":
                    try:
                        count = int(input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏–ª–µ–π (1-30): "))
                        if 1 <= count <= 30:
                            await self.automator.run_automation(count)
                        else:
                            print("‚ùå –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 30")
                    except ValueError:
                        print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                    
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print(f"üëã {self.project_name} automation –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

# –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
async def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç"""
    automator = BillionsNetworkAutomator()
    return await automator.run_automation(1)

async def run_batch(count):
    """–ó–∞–ø—É—Å–∫ –ø–∞–∫–µ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π"""
    automator = BillionsNetworkAutomator()
    return await automator.run_automation(count)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import sys
    
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == "test":
            success = await quick_test()
            print(f"\n{'üéâ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!' if success else '‚ùå –¢–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è'}")
        elif command == "cli":
            cli = ProjectAutomationCLI(BillionsNetworkAutomator, "Billions Network")
            await cli.run()
        elif command.isdigit():
            count = int(command)
            if 1 <= count <= 30:
                success = await run_batch(count)
                print(f"\n{'üéâ –í—ã–ø–æ–ª–Ω–µ–Ω–æ!' if success else '‚ùå –û—à–∏–±–∫–∏ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏'}")
            else:
                print("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 30")
        else:
            print("–ö–æ–º–∞–Ω–¥—ã:")
            print("  test      - –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç")
            print("  cli       - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º")  
            print("  [—á–∏—Å–ª–æ]   - –∑–∞–ø—É—Å–∫ N –ø—Ä–æ—Ñ–∏–ª–µ–π")
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é CLI
        cli = ProjectAutomationCLI(BillionsNetworkAutomator, "Billions Network")
        await cli.run()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()