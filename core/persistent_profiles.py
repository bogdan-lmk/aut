#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Persistent Profiles System - –°–∏—Å—Ç–µ–º–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
========================================================

–°–æ–∑–¥–∞–µ—Ç –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –±—Ä–∞—É–∑–µ—Ä–∞ —Å:
- –£–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∫–æ—à–µ–ª—å–∫–∞–º–∏
- –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–º–∏ email –∞–¥—Ä–µ—Å–∞–º–∏  
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º cookies –∏ session
- –ò—Å—Ç–æ—Ä–∏–µ–π –±—Ä–∞—É–∑–µ—Ä–∞
- Persistent storage
"""

import asyncio
import json
import sqlite3
from pathlib import Path
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, field, asdict
from datetime import datetime
import random
import string
import secrets

@dataclass
class PersistentProfile:
    """–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    id: str
    number: int                              # –ù–æ–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è (1-30)
    name: str
    
    # –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    user_agent: str
    viewport: Dict[str, int]
    locale: str
    timezone: str
    
    # –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    email: str                               # –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π email
    password: str                            # –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
    username: str                            # –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    # –ö–æ—à–µ–ª–µ–∫ –¥–∞–Ω–Ω—ã–µ
    wallet_type: str                         # rabby, phantom, metamask
    wallet_address: str                      # –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    wallet_seed: str                         # Seed phrase (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è)
    
    # –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    first_name: str
    last_name: str
    birth_date: str                          # YYYY-MM-DD
    phone_number: str                        # –¢–µ–ª–µ—Ñ–æ–Ω (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
    
    # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
    twitter_username: str                    # Twitter –∞–∫–∫–∞—É–Ω—Ç
    discord_username: str                    # Discord –∞–∫–∫–∞—É–Ω—Ç
    telegram_username: str                   # Telegram –∞–∫–∫–∞—É–Ω—Ç
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    proxy: Optional[Dict[str, str]] = None   # Proxy –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    created_at: datetime = field(default_factory=datetime.now)
    last_used: Optional[datetime] = None
    usage_count: int = 0
    
    # –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    is_active: bool = True
    notes: str = ""                          # –ó–∞–º–µ—Ç–∫–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ

class PersistentProfileManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π"""
    
    def __init__(self, profiles_count: int = 30):
        self.profiles_count = profiles_count
        self.profiles: List[PersistentProfile] = []
        self.profiles_db_path = Path("data/persistent_profiles.db")
        self.browser_data_dir = Path("browser_profiles")
        
        # –°–æ–∑–¥–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.profiles_db_path.parent.mkdir(exist_ok=True)
        self.browser_data_dir.mkdir(exist_ok=True)
        
        self._init_database()
        self._load_or_create_profiles()
    
    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        with sqlite3.connect(self.profiles_db_path) as conn:
            conn.execute("""
                CREATE TABLE IF NOT EXISTS persistent_profiles (
                    id TEXT PRIMARY KEY,
                    number INTEGER UNIQUE NOT NULL,
                    name TEXT NOT NULL,
                    
                    -- –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    user_agent TEXT NOT NULL,
                    viewport_width INTEGER NOT NULL,
                    viewport_height INTEGER NOT NULL,
                    locale TEXT NOT NULL,
                    timezone TEXT NOT NULL,
                    
                    -- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                    email TEXT NOT NULL,
                    password TEXT NOT NULL,
                    username TEXT NOT NULL,
                    
                    -- –ö–æ—à–µ–ª–µ–∫
                    wallet_type TEXT NOT NULL,
                    wallet_address TEXT,
                    wallet_seed TEXT,
                    
                    -- –ü—Ä–æ—Ñ–∏–ª—å
                    first_name TEXT NOT NULL,
                    last_name TEXT NOT NULL,
                    birth_date TEXT NOT NULL,
                    phone_number TEXT,
                    
                    -- –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
                    twitter_username TEXT,
                    discord_username TEXT,
                    telegram_username TEXT,
                    
                    -- –°–∏—Å—Ç–µ–º–Ω–æ–µ
                    proxy_config TEXT,
                    created_at TEXT NOT NULL,
                    last_used TEXT,
                    usage_count INTEGER DEFAULT 0,
                    is_active BOOLEAN DEFAULT 1,
                    notes TEXT DEFAULT ''
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            conn.execute("""
                CREATE TABLE IF NOT EXISTS profile_usage_history (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    profile_id TEXT NOT NULL,
                    project_name TEXT NOT NULL,
                    action TEXT NOT NULL,
                    success BOOLEAN NOT NULL,
                    timestamp TEXT NOT NULL,
                    details TEXT,
                    FOREIGN KEY (profile_id) REFERENCES persistent_profiles (id)
                )
            """)
    
    def _load_or_create_profiles(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ"""
        print("üìã –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π...")
        
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –±–∞–∑—ã
        existing_profiles = self._load_profiles_from_db()
        
        if len(existing_profiles) == self.profiles_count:
            self.profiles = existing_profiles
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.profiles)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")
        else:
            print(f"üîß –°–æ–∑–¥–∞–Ω–∏–µ {self.profiles_count} –Ω–æ–≤—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π...")
            self._create_new_profiles()
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(self.profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π")
    
    def _load_profiles_from_db(self) -> List[PersistentProfile]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        profiles = []
        
        try:
            with sqlite3.connect(self.profiles_db_path) as conn:
                cursor = conn.execute("""
                    SELECT * FROM persistent_profiles ORDER BY number
                """)
                
                for row in cursor.fetchall():
                    # –†–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
                    profile_data = {
                        'id': row[0],
                        'number': row[1],
                        'name': row[2],
                        'user_agent': row[3],
                        'viewport': {'width': row[4], 'height': row[5]},
                        'locale': row[6],
                        'timezone': row[7],
                        'email': row[8],
                        'password': row[9],
                        'username': row[10],
                        'wallet_type': row[11],
                        'wallet_address': row[12] or '',
                        'wallet_seed': row[13] or '',
                        'first_name': row[14],
                        'last_name': row[15],
                        'birth_date': row[16],
                        'phone_number': row[17] or '',
                        'twitter_username': row[18] or '',
                        'discord_username': row[19] or '',
                        'telegram_username': row[20] or '',
                        'proxy': json.loads(row[21]) if row[21] else None,
                        'created_at': datetime.fromisoformat(row[22]),
                        'last_used': datetime.fromisoformat(row[23]) if row[23] else None,
                        'usage_count': row[24],
                        'is_active': bool(row[25]),
                        'notes': row[26]
                    }
                    
                    profile = PersistentProfile(**profile_data)
                    profiles.append(profile)
                    
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")
            return []
        
        return profiles
    
    def _create_new_profiles(self):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏"""
        self.profiles = []
        
        # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
        ]
        
        viewports = [
            {"width": 1920, "height": 1080},
            {"width": 1440, "height": 900},
            {"width": 1366, "height": 768},
            {"width": 1536, "height": 864},
            {"width": 1280, "height": 720}
        ]
        
        locales = ["en-US", "en-GB", "en-CA", "en-AU"]
        timezones = ["America/New_York", "America/Los_Angeles", "Europe/London", "Europe/Berlin"]
        
        first_names = ["John", "Mike", "David", "Chris", "Alex", "Sam", "Tom", "Jack", "Nick", "Paul"]
        last_names = ["Smith", "Johnson", "Brown", "Davis", "Miller", "Wilson", "Moore", "Taylor", "Anderson", "Thomas"]
        
        email_domains = ["gmail.com", "yahoo.com", "outlook.com", "protonmail.com", "icloud.com"]
        wallet_types = ["rabby", "phantom", "metamask"]
        
        for i in range(self.profiles_count):
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            first_name = random.choice(first_names)
            last_name = random.choice(last_names)
            
            # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            username = f"{first_name.lower()}{last_name.lower()}{i+1:02d}"
            email = f"{username}@{random.choice(email_domains)}"
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
            password = self._generate_password()
            
            # –î–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è (–æ—Ç 18 –¥–æ 35 –ª–µ—Ç)
            birth_year = random.randint(1988, 2005)
            birth_month = random.randint(1, 12)
            birth_day = random.randint(1, 28)
            birth_date = f"{birth_year}-{birth_month:02d}-{birth_day:02d}"
            
            # –¢–µ–ª–µ—Ñ–æ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            phone = f"+1{random.randint(200, 999)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
            
            # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ (–Ω–∞ –æ—Å–Ω–æ–≤–µ username)
            twitter_user = f"{username}_tw"
            discord_user = f"{username}#{random.randint(1000, 9999)}"
            telegram_user = f"@{username}_tg"
            
            profile = PersistentProfile(
                id=f"profile_{i:02d}",
                number=i + 1,
                name=f"{first_name} {last_name} (Profile {i+1})",
                
                # –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                user_agent=random.choice(user_agents),
                viewport=random.choice(viewports),
                locale=random.choice(locales),
                timezone=random.choice(timezones),
                
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                email=email,
                password=password,
                username=username,
                
                # –ö–æ—à–µ–ª–µ–∫
                wallet_type=random.choice(wallet_types),
                wallet_address="",  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞
                wallet_seed="",     # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞
                
                # –ü—Ä–æ—Ñ–∏–ª—å
                first_name=first_name,
                last_name=last_name,
                birth_date=birth_date,
                phone_number=phone,
                
                # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
                twitter_username=twitter_user,
                discord_username=discord_user,
                telegram_username=telegram_user,
                
                # –°–∏—Å—Ç–µ–º–Ω–æ–µ
                proxy=None,
                is_active=True,
                notes=f"Auto-generated profile {i+1}"
            )
            
            self.profiles.append(profile)
            
            # –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
            profile_dir = self.browser_data_dir / profile.id
            profile_dir.mkdir(exist_ok=True)
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self._save_profile_to_db(profile)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(self.profiles)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")
    
    def _generate_password(self, length: int = 12) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
        chars = string.ascii_letters + string.digits + "!@#$%"
        return ''.join(secrets.choice(chars) for _ in range(length))
    
    def _save_profile_to_db(self, profile: PersistentProfile):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(self.profiles_db_path) as conn:
            conn.execute("""
                INSERT OR REPLACE INTO persistent_profiles VALUES 
                (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                profile.id, profile.number, profile.name,
                profile.user_agent, profile.viewport['width'], profile.viewport['height'],
                profile.locale, profile.timezone,
                profile.email, profile.password, profile.username,
                profile.wallet_type, profile.wallet_address, profile.wallet_seed,
                profile.first_name, profile.last_name, profile.birth_date, profile.phone_number,
                profile.twitter_username, profile.discord_username, profile.telegram_username,
                json.dumps(profile.proxy) if profile.proxy else None,
                profile.created_at.isoformat(),
                profile.last_used.isoformat() if profile.last_used else None,
                profile.usage_count, profile.is_active, profile.notes
            ))
    
    def get_profile(self, profile_id: str) -> Optional[PersistentProfile]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ ID"""
        for profile in self.profiles:
            if profile.id == profile_id:
                return profile
        return None
    
    def get_profile_by_number(self, number: int) -> Optional[PersistentProfile]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ –Ω–æ–º–µ—Ä—É"""
        for profile in self.profiles:
            if profile.number == number:
                return profile
        return None
    
    def get_available_profiles(self, count: int = None) -> List[PersistentProfile]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏"""
        active_profiles = [p for p in self.profiles if p.is_active]
        
        if count:
            return active_profiles[:count]
        return active_profiles
    
    def update_profile_usage(self, profile_id: str, project_name: str, action: str, success: bool, details: str = ""):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        profile = self.get_profile(profile_id)
        if profile:
            profile.last_used = datetime.now()
            profile.usage_count += 1
            self._save_profile_to_db(profile)
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
            with sqlite3.connect(self.profiles_db_path) as conn:
                conn.execute("""
                    INSERT INTO profile_usage_history 
                    (profile_id, project_name, action, success, timestamp, details)
                    VALUES (?, ?, ?, ?, ?, ?)
                """, (profile_id, project_name, action, success, datetime.now().isoformat(), details))
    
    def update_wallet_data(self, profile_id: str, wallet_address: str, wallet_seed: str = ""):
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
        profile = self.get_profile(profile_id)
        if profile:
            profile.wallet_address = wallet_address
            if wallet_seed:
                profile.wallet_seed = wallet_seed  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å
            self._save_profile_to_db(profile)
    
    def export_profiles_info(self) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª—è—Ö"""
        info = []
        info.append("üìã –ü–û–°–¢–û–Ø–ù–ù–´–ï –ü–†–û–§–ò–õ–ò –ë–†–ê–£–ó–ï–†–ê")
        info.append("=" * 50)
        
        for profile in self.profiles:
            info.append(f"\nüë§ –ü–†–û–§–ò–õ–¨ #{profile.number} ({profile.id})")
            info.append(f"   –ò–º—è: {profile.first_name} {profile.last_name}")
            info.append(f"   Email: {profile.email}")
            info.append(f"   –õ–æ–≥–∏–Ω: {profile.username}")
            info.append(f"   –ü–∞—Ä–æ–ª—å: {profile.password}")
            info.append(f"   –ö–æ—à–µ–ª–µ–∫: {profile.wallet_type}")
            if profile.wallet_address:
                info.append(f"   –ê–¥—Ä–µ—Å: {profile.wallet_address}")
            info.append(f"   Twitter: {profile.twitter_username}")
            info.append(f"   Discord: {profile.discord_username}")
            info.append(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {profile.phone_number}")
            info.append(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {profile.usage_count}")
            if profile.last_used:
                info.append(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ: {profile.last_used.strftime('%Y-%m-%d %H:%M')}")
        
        return "\n".join(info)
    
    def get_profiles_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –ø—Ä–æ—Ñ–∏–ª—è–º"""
        active_count = len([p for p in self.profiles if p.is_active])
        
        wallet_types = {}
        for profile in self.profiles:
            wallet_types[profile.wallet_type] = wallet_types.get(profile.wallet_type, 0) + 1
        
        total_usage = sum(p.usage_count for p in self.profiles)
        
        return {
            "total_profiles": len(self.profiles),
            "active_profiles": active_count,
            "wallet_distribution": wallet_types,
            "total_usage": total_usage,
            "avg_usage_per_profile": total_usage / len(self.profiles) if self.profiles else 0
        }

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
class PersistentBrowserAutomator:
    """–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–æ—Ä —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏"""
    
    def __init__(self, config_path: str = "config.json"):
        from browser_automation_core import ConfigManager, CoordinateDatabase
        
        self.config = ConfigManager(config_path)
        self.coordinate_db = CoordinateDatabase()
        self.profile_manager = PersistentProfileManager(30)
        self.playwright = None
        self.browsers: Dict[str, Any] = {}
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏"""
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏...")
        
        try:
            from playwright.async_api import async_playwright
            
            self.playwright = await async_playwright().start()
            print("‚úÖ Playwright –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            summary = self.profile_manager.get_profiles_summary()
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {summary['total_profiles']} –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")
            print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {summary['active_profiles']}")
            print(f"   –ö–æ—à–µ–ª—å–∫–∏: {summary['wallet_distribution']}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def create_persistent_browser_context(self, profile: PersistentProfile):
        """–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            # –ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª—è
            profile_data_dir = Path("browser_profiles") / profile.id
            profile_data_dir.mkdir(exist_ok=True)
            
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º
            browser = await self.playwright.chromium.launch_persistent_context(
                user_data_dir=str(profile_data_dir),
                headless=self.config.get("browser.headless", False),
                viewport=profile.viewport,
                user_agent=profile.user_agent,
                locale=profile.locale,
                timezone_id=profile.timezone,
                args=[
                    "--disable-blink-features=AutomationControlled",
                    "--no-sandbox",
                    "--disable-setuid-sandbox",
                    "--disable-dev-shm-usage"
                ]
            )
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è {profile.name}")
            return browser
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            raise
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        for browser in self.browsers.values():
            try:
                await browser.close()
            except:
                pass
        
        if self.playwright:
            try:
                await self.playwright.stop()
            except:
                pass

# CLI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è–º–∏
class ProfileManagerCLI:
    """CLI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏"""
    
    def __init__(self):
        self.profile_manager = PersistentProfileManager()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ CLI —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è–º–∏"""
        print("üë• –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")
        print("=" * 40)
        
        while True:
            try:
                print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
                print("1. üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")
                print("2. üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ")
                print("3. üí∞ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞")
                print("4. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π")
                print("5. üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")
                print("6. üîß –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
                print("7. ‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
                print("0. üö™ –í—ã—Ö–æ–¥")
                
                choice = input("\n–í—ã–±–æ—Ä (0-7): ").strip()
                
                if choice == "0":
                    break
                elif choice == "1":
                    self._list_profiles()
                elif choice == "2":
                    self._show_profile_info()
                elif choice == "3":
                    self._update_wallet_data()
                elif choice == "4":
                    self._show_statistics()
                elif choice == "5":
                    self._export_profiles()
                elif choice == "6":
                    self._deactivate_profile()
                elif choice == "7":
                    self._activate_profile()
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                    
            except KeyboardInterrupt:
                print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def _list_profiles(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        print("\nüìã –°–ü–ò–°–û–ö –ü–†–û–§–ò–õ–ï–ô:")
        print("-" * 60)
        
        for profile in self.profile_manager.profiles:
            status = "üü¢" if profile.is_active else "üî¥"
            wallet_info = f"({profile.wallet_type})" if profile.wallet_type else ""
            usage_info = f"[{profile.usage_count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π]"
            
            print(f"{status} #{profile.number:02d} | {profile.name} | {profile.email} {wallet_info} {usage_info}")
    
    def _show_profile_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ"""
        try:
            number = int(input("–ù–æ–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è (1-30): "))
            profile = self.profile_manager.get_profile_by_number(number)
            
            if not profile:
                print("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            print(f"\nüë§ –ü–†–û–§–ò–õ–¨ #{profile.number} - {profile.name}")
            print("=" * 50)
            print(f"ID: {profile.id}")
            print(f"–°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if profile.is_active else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}")
            print(f"Email: {profile.email}")
            print(f"–ü–∞—Ä–æ–ª—å: {profile.password}")
            print(f"–õ–æ–≥–∏–Ω: {profile.username}")
            print(f"–ò–º—è: {profile.first_name} {profile.last_name}")
            print(f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {profile.birth_date}")
            print(f"–¢–µ–ª–µ—Ñ–æ–Ω: {profile.phone_number}")
            print(f"–ö–æ—à–µ–ª–µ–∫: {profile.wallet_type}")
            if profile.wallet_address:
                print(f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {profile.wallet_address}")
            print(f"Twitter: {profile.twitter_username}")
            print(f"Discord: {profile.discord_username}")
            print(f"Telegram: {profile.telegram_username}")
            print(f"–ë—Ä–∞—É–∑–µ—Ä: {profile.user_agent.split()[7] if len(profile.user_agent.split()) > 7 else 'Chrome'}")
            print(f"–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {profile.viewport['width']}x{profile.viewport['height']}")
            print(f"–õ–æ–∫–∞–ª—å: {profile.locale}")
            print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {profile.usage_count}")
            if profile.last_used:
                print(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {profile.last_used.strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"–°–æ–∑–¥–∞–Ω: {profile.created_at.strftime('%Y-%m-%d %H:%M:%S')}")
            if profile.notes:
                print(f"–ó–∞–º–µ—Ç–∫–∏: {profile.notes}")
                
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
    
    def _update_wallet_data(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞"""
        try:
            number = int(input("–ù–æ–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è (1-30): "))
            profile = self.profile_manager.get_profile_by_number(number)
            
            if not profile:
                print("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            print(f"–¢–µ–∫—É—â–∏–π –∫–æ—à–µ–ª–µ–∫: {profile.wallet_type}")
            print(f"–¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å: {profile.wallet_address or '–ù–µ –∑–∞–¥–∞–Ω'}")
            
            new_address = input("–ù–æ–≤—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ (Enter - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å): ").strip()
            if new_address:
                self.profile_manager.update_wallet_data(profile.id, new_address)
                print("‚úÖ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω")
            
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
    
    def _show_statistics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        summary = self.profile_manager.get_profiles_summary()
        
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–§–ò–õ–ï–ô:")
        print("=" * 30)
        print(f"–í—Å–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {summary['total_profiles']}")
        print(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {summary['active_profiles']}")
        print(f"–û–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {summary['total_usage']}")
        print(f"–°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: {summary['avg_usage_per_profile']:.1f}")
        
        print("\nüí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤:")
        for wallet_type, count in summary['wallet_distribution'].items():
            print(f"  {wallet_type}: {count} –ø—Ä–æ—Ñ–∏–ª–µ–π")
    
    def _export_profiles(self):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        export_data = self.profile_manager.export_profiles_info()
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª
        export_file = Path("exports") / f"profiles_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        export_file.parent.mkdir(exist_ok=True)
        
        with open(export_file, 'w', encoding='utf-8') as f:
            f.write(export_data)
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {export_file}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é –≤–µ—Ä—Å–∏—é
        print("\nüì§ –ö–†–ê–¢–ö–ò–ô –≠–ö–°–ü–û–†–¢:")
        for profile in self.profile_manager.profiles[:5]:  # –ü–µ—Ä–≤—ã–µ 5
            print(f"#{profile.number}: {profile.email} | {profile.password} | {profile.wallet_type}")
        
        if len(self.profile_manager.profiles) > 5:
            print(f"... –∏ –µ—â–µ {len(self.profile_manager.profiles) - 5} –ø—Ä–æ—Ñ–∏–ª–µ–π")
    
    def _deactivate_profile(self):
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"""
        try:
            number = int(input("–ù–æ–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (1-30): "))
            profile = self.profile_manager.get_profile_by_number(number)
            
            if not profile:
                print("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            if not profile.is_active:
                print("‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
                return
            
            profile.is_active = False
            self.profile_manager._save_profile_to_db(profile)
            print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å #{number} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
    
    def _activate_profile(self):
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"""
        try:
            number = int(input("–ù–æ–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (1-30): "))
            profile = self.profile_manager.get_profile_by_number(number)
            
            if not profile:
                print("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            if profile.is_active:
                print("‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω")
                return
            
            profile.is_active = True
            self.profile_manager._save_profile_to_db(profile)
            print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å #{number} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")

# –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏
async def test_persistent_profiles():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π...")
    
    try:
        # –°–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–æ—Ä —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏
        automator = PersistentBrowserAutomator()
        
        if not await automator.initialize():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É")
            return False
        
        # –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        profile = automator.profile_manager.get_profile_by_number(1)
        if not profile:
            print("‚ùå –ü—Ä–æ—Ñ–∏–ª—å #1 –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print(f"üë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è: {profile.name}")
        print(f"   Email: {profile.email}")
        print(f"   –ö–æ—à–µ–ª–µ–∫: {profile.wallet_type}")
        
        # –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞
        browser = await automator.create_persistent_browser_context(profile)
        
        # –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page = await browser.new_page()
        
        # –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await page.goto("https://example.com")
        print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç
        screenshot_path = Path("screenshots") / f"persistent_test_{profile.id}.png"
        screenshot_path.parent.mkdir(exist_ok=True)
        await page.screenshot(path=str(screenshot_path))
        print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: {screenshot_path}")
        
        # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        automator.profile_manager.update_profile_usage(
            profile.id, "test", "page_visit", True, "–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ example.com"
        )
        
        # –ó–∞–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä
        await browser.close()
        
        await automator.cleanup()
        
        print("üéâ –¢–µ—Å—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Billions Network –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π
class BillionsWithPersistentProfiles:
    """Billions Network –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏"""
    
    def __init__(self):
        self.site_url = "https://signup.billions.network/"
        self.automator = None
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏"""
        self.automator = PersistentBrowserAutomator()
        return await self.automator.initialize()
    
    async def run_with_persistent_profiles(self, profile_numbers: List[int]):
        """–ó–∞–ø—É—Å–∫ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        print(f"üöÄ Billions Network —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏")
        print(f"üë• –ü—Ä–æ—Ñ–∏–ª–∏: {profile_numbers}")
        print("=" * 50)
        
        if not await self.initialize():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É")
            return False
        
        successful = 0
        failed = 0
        
        for profile_number in profile_numbers:
            print(f"\nüë§ –ü—Ä–æ—Ñ–∏–ª—å #{profile_number}")
            print("-" * 30)
            
            profile = self.automator.profile_manager.get_profile_by_number(profile_number)
            if not profile:
                print(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å #{profile_number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                failed += 1
                continue
            
            if not profile.is_active:
                print(f"‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å #{profile_number} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
            
            success = await self._process_profile(profile)
            
            if success:
                successful += 1
                print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å #{profile_number}: –£–°–ü–ï–•")
            else:
                failed += 1
                print(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å #{profile_number}: –ù–ï–£–î–ê–ß–ê")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ—Ñ–∏–ª—è–º–∏
            if profile_number != profile_numbers[-1]:
                print("‚è≥ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã...")
                await asyncio.sleep(3)
        
        # –ò—Ç–æ–≥–∏
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {failed}")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(successful/(successful+failed)*100):.1f}%" if (successful+failed) > 0 else "N/A")
        
        await self.automator.cleanup()
        return successful > 0
    
    async def _process_profile(self, profile: PersistentProfile):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å"""
        try:
            print(f"üîß {profile.name}")
            print(f"   Email: {profile.email}")
            print(f"   –ö–æ—à–µ–ª–µ–∫: {profile.wallet_type}")
            
            # –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            browser = await self.automator.create_persistent_browser_context(profile)
            page = await browser.new_page()
            
            try:
                # –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ Billions Network
                print(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ {self.site_url}")
                await page.goto(self.site_url, wait_until="domcontentloaded", timeout=30000)
                await asyncio.sleep(3)
                
                # –ü–æ–∏—Å–∫ –∏ –∫–ª–∏–∫ –∫–Ω–æ–ø–∫–∏ "Click & Earn 25 power"
                button_clicked = await self._click_earn_button(page)
                
                if button_clicked:
                    print("‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!")
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
                    await asyncio.sleep(2)
                    wallet_handled = await self._handle_wallet(page, profile)
                    
                    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    await self._save_screenshot(page, profile, "success")
                    
                    # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    self.automator.profile_manager.update_profile_usage(
                        profile.id, "billions_network", "earn_click", True, 
                        f"–£—Å–ø–µ—à–Ω—ã–π –∫–ª–∏–∫ –Ω–∞ {self.site_url}"
                    )
                    
                    return True
                else:
                    print("‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    await self._save_screenshot(page, profile, "button_not_found")
                    
                    # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    self.automator.profile_manager.update_profile_usage(
                        profile.id, "billions_network", "earn_click", False, 
                        "–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                    )
                    
                    return False
                
            finally:
                await browser.close()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            
            # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.automator.profile_manager.update_profile_usage(
                profile.id, "billions_network", "earn_click", False, 
                f"–û—à–∏–±–∫–∞: {str(e)}"
            )
            
            return False
    
    async def _click_earn_button(self, page):
        """–ù–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –∫–Ω–æ–ø–∫—É"""
        selectors = [
            'button.ant-btn.ant-btn-primary:has-text("Click & Earn")',
            'button:has-text("Click & Earn 25 power")',
            'button:has-text("Click & Earn")',
            'text=Click & Earn'
        ]
        
        for selector in selectors:
            try:
                element = await page.wait_for_selector(selector, timeout=3000)
                if element and await element.is_visible():
                    await element.scroll_into_view_if_needed()
                    await element.click()
                    return True
            except:
                continue
        
        return False
    
    async def _handle_wallet(self, page, profile):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ—à–µ–ª—å–∫–æ–º"""
        try:
            # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ—à–µ–ª—å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            from extension_handler import ExtensionActionHandler
            
            handler = ExtensionActionHandler(self.automator.coordinate_db)
            
            # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
            if profile.wallet_type == "rabby":
                from extension_handler import WalletType
                success = await handler.perform_wallet_action(page, "connect", WalletType.RABBY)
                if success:
                    print(f"‚úÖ –ö–æ—à–µ–ª–µ–∫ {profile.wallet_type} –ø–æ–¥–∫–ª—é—á–µ–Ω")
                    return True
            
            return False
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ—à–µ–ª—å–∫–∞: {e}")
            return False
    
    async def _save_screenshot(self, page, profile, status):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç"""
        try:
            timestamp = datetime.now().strftime('%H%M%S')
            filename = f"billions_{status}_{profile.id}_{timestamp}.png"
            filepath = Path("screenshots") / "billions_persistent" / filename
            filepath.parent.mkdir(parents=True, exist_ok=True)
            
            await page.screenshot(path=str(filepath))
            print(f"üì∏ {filename}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {e}")

# CLI –¥–ª—è Billions —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏
class BillionsPersistentCLI:
    """CLI –¥–ª—è Billions Network —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏"""
    
    def __init__(self):
        self.billions = BillionsWithPersistentProfiles()
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ CLI"""
        print("ü§ñ Billions Network - –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏")
        print("=" * 50)
        
        while True:
            try:
                print("\n–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:")
                print("1. üß™ –¢–µ—Å—Ç —Å –ø—Ä–æ—Ñ–∏–ª–µ–º #1")
                print("2. üéØ –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –≤—Ä—É—á–Ω—É—é")
                print("3. üìä –ü–µ—Ä–≤—ã–µ 5 –ø—Ä–æ—Ñ–∏–ª–µ–π")
                print("4. üí™ –ü–µ—Ä–≤—ã–µ 10 –ø—Ä–æ—Ñ–∏–ª–µ–π")
                print("5. üî• –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏")
                print("6. üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏")
                print("0. üö™ –í—ã—Ö–æ–¥")
                
                choice = input("\n–í—ã–±–æ—Ä (0-6): ").strip()
                
                if choice == "0":
                    break
                elif choice == "1":
                    await self.billions.run_with_persistent_profiles([1])
                elif choice == "2":
                    await self._manual_profile_selection()
                elif choice == "3":
                    await self.billions.run_with_persistent_profiles(list(range(1, 6)))
                elif choice == "4":
                    await self.billions.run_with_persistent_profiles(list(range(1, 11)))
                elif choice == "5":
                    await self._run_all_active()
                elif choice == "6":
                    profile_cli = ProfileManagerCLI()
                    profile_cli.run()
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                    
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print("üëã Billions automation –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    async def _manual_profile_selection(self):
        """–†—É—á–Ω–æ–π –≤—ã–±–æ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        try:
            print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,3,5-8)")
            selection = input("–ü—Ä–æ—Ñ–∏–ª–∏: ").strip()
            
            profile_numbers = []
            
            for part in selection.split(','):
                part = part.strip()
                if '-' in part:
                    # –î–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä 5-8)
                    start, end = map(int, part.split('-'))
                    profile_numbers.extend(range(start, end + 1))
                else:
                    # –û—Ç–¥–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
                    profile_numbers.append(int(part))
            
            # –£–±—Ä–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
            profile_numbers = sorted(list(set(profile_numbers)))
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω
            valid_numbers = [n for n in profile_numbers if 1 <= n <= 30]
            
            if not valid_numbers:
                print("‚ùå –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π")
                return
            
            print(f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏: {valid_numbers}")
            confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").lower()
            
            if confirm == 'y':
                await self.billions.run_with_persistent_profiles(valid_numbers)
            
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def _run_all_active(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        try:
            # –ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π
            if not hasattr(self.billions, 'automator') or not self.billions.automator:
                temp_automator = PersistentBrowserAutomator()
                await temp_automator.initialize()
                profile_manager = temp_automator.profile_manager
                await temp_automator.cleanup()
            else:
                profile_manager = self.billions.automator.profile_manager
            
            active_profiles = profile_manager.get_available_profiles()
            active_numbers = [p.number for p in active_profiles]
            
            if not active_numbers:
                print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")
                return
            
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(active_numbers)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π: {active_numbers}")
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!")
            confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").lower()
            
            if confirm == 'y':
                await self.billions.run_with_persistent_profiles(active_numbers)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –ì–ª–∞–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import sys
    
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == "test":
            await test_persistent_profiles()
        elif command == "profiles":
            profile_cli = ProfileManagerCLI()
            profile_cli.run()
        elif command == "billions":
            billions_cli = BillionsPersistentCLI()
            await billions_cli.run()
        else:
            print("–ö–æ–º–∞–Ω–¥—ã:")
            print("  test     - —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")
            print("  profiles - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏")
            print("  billions - Billions Network —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏")
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–µ–Ω—é
        billions_cli = BillionsPersistentCLI()
        await billions_cli.run()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()