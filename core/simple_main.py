#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Simple Main System - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≥–ª–∞–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–µ–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π
"""

import asyncio
import json
from pathlib import Path
from typing import Dict, List, Optional, Any
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from browser_automation_core import UniversalBrowserAutomator, ConfigManager
    from extension_handler import ExtensionActionHandler, WalletType
    MODULES_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    MODULES_AVAILABLE = False

class SimpleAutomationSystem:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self):
        if not MODULES_AVAILABLE:
            print("‚ùå –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return
            
        self.automator = UniversalBrowserAutomator()
        self.extension_handler = None
        self.running = False
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        if not MODULES_AVAILABLE:
            return False
            
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Simple Automation System...")
        
        try:
            success = await self.automator.initialize()
            if not success:
                return False
            
            self.extension_handler = ExtensionActionHandler(
                self.automator.coordinate_db
            )
            
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if MODULES_AVAILABLE and self.automator:
            await self.automator.cleanup()
        print("‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
    
    async def test_basic_functionality(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
        
        if not await self.initialize():
            return False
        
        try:
            # –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
            profile = self.automator.profile_manager.get_available_profile()
            if not profile:
                print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")
                return False
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å: {profile.id}")
            
            # –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞
            context = await self.automator.create_browser_context(profile)
            page = await context.new_page()
            
            # –û—Ç–∫—Ä—ã—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await page.goto("https://example.com")
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
            # –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç
            screenshot_path = Path("screenshots") / "test_screenshot.png"
            screenshot_path.parent.mkdir(exist_ok=True)
            await page.screenshot(path=str(screenshot_path))
            print(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path}")
            
            # –¢–µ—Å—Ç –¥–µ–π—Å—Ç–≤–∏–π –∫–æ—à–µ–ª—å–∫–∞
            print("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∫–æ—à–µ–ª—å–∫–∞...")
            success = await self.extension_handler.perform_wallet_action(
                page, "connect", WalletType.RABBY
            )
            print(f"‚úÖ –¢–µ—Å—Ç –∫–æ—à–µ–ª—å–∫–∞: {'–£—Å–ø–µ—Ö' if success else '–ù–µ—É–¥–∞—á–∞'}")
            
            # –ó–∞–∫—Ä—ã—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
            await context.close()
            
            print("üéâ –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            return False
        
        finally:
            await self.cleanup()
    
    async def run_interactive_mode(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"""
        print("üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º Simple Automation System")
        print("=" * 50)
        
        if not await self.initialize():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É")
            return
        
        while True:
            try:
                print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
                print("1. –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã")
                print("2. –û—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä")
                print("3. –¢–µ—Å—Ç –∫–æ—à–µ–ª—å–∫–∞")
                print("4. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
                print("0. –í—ã—Ö–æ–¥")
                
                choice = input("\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (0-4): ").strip()
                
                if choice == "0":
                    break
                elif choice == "1":
                    await self.test_basic_functionality()
                elif choice == "2":
                    await self._open_browser_demo()
                elif choice == "3":
                    await self._test_wallet_demo()
                elif choice == "4":
                    self._show_system_info()
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                    
            except KeyboardInterrupt:
                print("\n\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        await self.cleanup()
        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    
    async def _open_browser_demo(self):
        """–î–µ–º–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞"""
        print("üåê –û—Ç–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞...")
        
        try:
            profile = self.automator.profile_manager.get_available_profile()
            context = await self.automator.create_browser_context(profile)
            page = await context.new_page()
            
            await page.goto("https://google.com")
            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç –Ω–∞ Google")
            
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...")
            await context.close()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
    
    async def _test_wallet_demo(self):
        """–î–µ–º–æ —Ç–µ—Å—Ç–∞ –∫–æ—à–µ–ª—å–∫–∞"""
        print("üí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞...")
        
        try:
            profile = self.automator.profile_manager.get_available_profile()
            context = await self.automator.create_browser_context(profile)
            page = await context.new_page()
            
            await page.goto("https://app.uniswap.org")
            print("‚úÖ –û—Ç–∫—Ä—ã—Ç Uniswap")
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –∫–ª–∏–∫–∞ –Ω–∞ Connect Wallet
            try:
                await page.click("text=Connect Wallet", timeout=5000)
                print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ Connect Wallet")
                
                await asyncio.sleep(2)
                
                # –¢–µ—Å—Ç –¥–µ–π—Å—Ç–≤–∏–π –∫–æ—à–µ–ª—å–∫–∞
                success = await self.extension_handler.perform_wallet_action(
                    page, "connect", WalletType.RABBY
                )
                print(f"‚úÖ –¢–µ—Å—Ç –∫–æ—à–µ–ª—å–∫–∞: {'–£—Å–ø–µ—Ö' if success else '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏'}")
                
            except Exception:
                print("‚ÑπÔ∏è –ö–Ω–æ–ø–∫–∞ Connect Wallet –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞)")
            
            await context.close()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫–æ—à–µ–ª—å–∫–∞: {e}")
    
    def _show_system_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
        print("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:")
        print(f"–ú–æ–¥—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã: {'‚úÖ' if MODULES_AVAILABLE else '‚ùå'}")
        print(f"–í—Å–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {len(self.automator.profile_manager.profiles) if MODULES_AVAILABLE else 'N/A'}")
        print(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π: {len(self.automator.profile_manager.active_profiles) if MODULES_AVAILABLE else 'N/A'}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_exists = Path("config.json").exists()
        print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {'‚úÖ' if config_exists else '‚ùå'}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_exists = Path("data/coordinates.db").exists()
        print(f"–ë–∞–∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {'‚úÖ' if db_exists else '‚ùå'}")

class SimpleCLI:
    """–ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    
    def __init__(self):
        self.system = SimpleAutomationSystem()
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ CLI"""
        print("ü§ñ Universal Browser Automation - Simple System")
        print("=" * 50)
        
        await self.system.run_interactive_mode()

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import sys
    
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        system = SimpleAutomationSystem()
        
        if command == "test":
            await system.test_basic_functionality()
        elif command == "interactive":
            await system.run_interactive_mode()
        else:
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: test, interactive")
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        cli = SimpleCLI()
        await cli.run()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
